<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_BottlePlaceHolder</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>full=100
held=false
pour=false
nextdrop=2
lastx=x
lasty=y
xvel=0
yvel=0
angleDiff=0
lastAngle=0
color=c_white

last=-1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controls swaying physics
//if abs(image_angle)&gt;360 image_angle=(abs(image_angle) mod 360)

if held{
    angleDiff=mean(angle_difference(image_angle,lastAngle),angleDiff)
    lastAngle=image_angle
    xvel=mean(x-lastx,xvel)
    yvel=mean(y-lasty,yvel)
    if pour image_angle-=angle_difference(image_angle,120*sign(image_angle))/3
    else image_angle-=angle_difference(image_angle,0)/3
    image_angle-=xvel
}
else{
    image_angle-=angle_difference(image_angle,0)/max(abs(angleDiff),1)
    if place_meeting(x,y+1,obj_wall) image_angle-=angle_difference(image_angle,0)/max(abs(angleDiff)/2,1)
    image_angle+=angleDiff
    angleDiff/=1.03
    yvel+=1.5
    scr_collision()
    xvel/=1.1
    yvel/=1.1
}

lastx=x
lasty=y

if pour image_angle=clamp(image_angle,-180,180)
else if image_angle!=0 image_angle= image_angle mod (sign(image_angle)*360)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Gets bottle unstuck from walls
scr_moveOutFromWall()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pouring

if abs(image_angle)&gt;=95 nextdrop-=1//+abs(xvel)+abs(yvel)
else last=-1

if nextdrop&lt;=0{
    nextdrop=2
    with instance_create(x+lengthdir_x(sprite_yoffset*0.75,image_angle+90),y+lengthdir_y(sprite_yoffset*0.75,image_angle+90),obj_liquid){
        color=other.color
        size=clamp(sqr(abs(angle_difference(other.image_angle,0))/36),4,25)
        xvel=other.xvel/8+lengthdir_x(8,other.image_angle+90)+random_range(-1,1)
        yvel=other.yvel/8+lengthdir_y(8,other.image_angle+90)+random_range(-1,1)
        if instance_exists(other.last)other.last.next=id
        other.last=id
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
