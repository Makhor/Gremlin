<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//the music volume porcentage
subimg = 0;
finalsubimg = 0;
textx = 20;
//our current option in the menu
curoption = 0;
menuindex = 1;
//menu names, one of the values MUST be "Music:", or the music slider sprite won't work.
optionnames[0] = "Start Game";
optionnames[1] = "How to play";
optionnames[2] = "Credits";
optionnames[3] = "Exit";


//array length
numberofoptions = array_length_1d(optionnames) - 1;

//the height of the window
displayheight = window_get_height();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//menu navigation
if (keyboard_check_pressed(vk_down)) {
   if (curoption != numberofoptions) {
    textx = 20;
   }
   curoption += 1;
}

if (keyboard_check_pressed(vk_up)) {
  //prevents the text animation to restart when you are at 0, which means that even if you press the key and you are in 0, the text animation won't reset
  if (curoption != 0) {
   //bring back the textx variable to 5 to reset the text animation effect 
    textx = 20;
  }
  curoption -= 1;
}

//menu selection
if (keyboard_check_pressed(ord("Z"))) {
   
   switch(curoption) {
    case 0:
    if (room != room_Test) {
     room_goto(room_Test);
     }
     break;
    case 1:
    if (room != room_Howto) {
     room_goto(room_Howto);
    }
    break;
    case 2:
    if (room != room_Credits) {
     room_goto(room_Credits);
     }
    break;
    case 3:
    game_end();
    break;
   }
}



curoption = clamp(curoption,0, numberofoptions);

textx = lerp(textx, 24, .1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_colour(c_white);
draw_set_halign(fa_left);

draw_text(20, 250, "Gremblo's Tavern");

var i = 0;
//todo: optimize this if you can.
for (i = 0; i &lt; numberofoptions + 1; i += 1) {
  var offset = 80;
  if (i = curoption) {
  if (optionnames[i] != "") {
   //shitty looking text effect, replace it with something better.
   draw_set_colour(c_purple);
   draw_text(20, display_get_gui_height() / 1.5 + offset * i, string(optionnames[i]));
   draw_set_colour(c_white);
   var text = draw_text(textx, display_get_gui_height() / 1.5 + offset * i, string(optionnames[i]));

  }
  } else {
  if (optionnames[i] != "") {
   draw_set_colour(c_white);
   draw_text(20, display_get_gui_height() / 1.5 + offset * i, string(optionnames[i]));
  }
  }
}

draw_set_halign(fa_middle);


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
